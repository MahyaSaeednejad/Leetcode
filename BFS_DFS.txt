// DFS & BFS on binary tree

import java.util.LinkedList;
import java.util.Queue;

class Node{

    Node left;
    Node right;
    int value;

    Node(int val){
        this.value = val;
        right = null;
        left = null;
    }
}
public class Main{

    public static LinkedList DFS(Node root, LinkedList list){

        if(root == null)
            return null;

        else{
            DFS(root.left, list);
            list.add(root.value);
            DFS(root.right, list);
        }

        return list;
    }
    public static LinkedList BFS(Node root, LinkedList list){

        Queue<Node> queue = new LinkedList<Node>();

        if(root != null)
            queue.add(root);

        while(!queue.isEmpty()){
            Node temp = queue.poll();

            list.add(temp.value);

            if(temp.left != null)
                queue.add(temp.left);
            if(temp.right != null)
                queue.add(temp.right);
        }

        return list;
    }
    public static void main(String []args){

        Node root= new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.right = new Node(6);

        LinkedList list = new LinkedList();

//        System.out.println(DFS(root, list));

        System.out.println(BFS(root, list));
    }
}
